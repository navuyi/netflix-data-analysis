timestamps = data$timestamp
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
assessment_values = na.omit(data$assessment_value)
assessment_timestamps = data$assessment_timestamp # Removing NAs
assessment_timestamps <- assessment_timestamps[assessment_timestamps != ""] # Removing empty strings
experiment_start <- data$timestamp[1]
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
assessment_values = na.omit(data$assessment_value)
assessment_timestamps = data$assessment_timestamp # Removing NAs
assessment_timestamps <- assessment_timestamps[assessment_timestamps != ""] # Removing empty strings
experiment_start <- data$timestamp[1]
index <- 0
for(assessment in assessment_values){
# Increment index
index <- index + 1
if(index == 1){
# Analyze for the first assessment
# Time between experiment start and assessment timestamp
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(experiment_start, DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
print(t_delta)
vmaf <- c()
vmaf_index = 0
for(vmaf in playing_vmaf){
vmaf_index = vmaf_index + 1
vmaf_timestamp = strptime(timestamps[vmaf_index], DATE_FORMAT)
if(vmaf_timestamp >= previous_timestamp & vmaf_timestamp <= current_timestamp){
vmaf <- c(vmaf, playing_vmaf[vmaf_index])
}
}
}
else{
# Analyze for the rest
# Time between current assessment timestamp and the previous one
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(assessment_timestamps[index-1], DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
}
}
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
assessment_values = na.omit(data$assessment_value)
assessment_timestamps = data$assessment_timestamp # Removing NAs
assessment_timestamps <- assessment_timestamps[assessment_timestamps != ""] # Removing empty strings
experiment_start <- data$timestamp[1]
index <- 0
for(assessment in assessment_values){
# Increment index
index <- index + 1
if(index == 1){
# Analyze for the first assessment
# Time between experiment start and assessment timestamp
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(experiment_start, DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
vmaf <- c()
vmaf_index = 0
for(vmaf in playing_vmaf){
vmaf_index = vmaf_index + 1
vmaf_timestamp = strptime(timestamps[vmaf_index], DATE_FORMAT)
if(vmaf_timestamp >= previous_timestamp & vmaf_timestamp <= current_timestamp){
print("ok")
vmaf <- c(vmaf, playing_vmaf[vmaf_index])
}
}
}
else{
# Analyze for the rest
# Time between current assessment timestamp and the previous one
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(assessment_timestamps[index-1], DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
}
}
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
assessment_values = na.omit(data$assessment_value)
assessment_timestamps = data$assessment_timestamp # Removing NAs
assessment_timestamps <- assessment_timestamps[assessment_timestamps != ""] # Removing empty strings
experiment_start <- data$timestamp[1]
index <- 0
for(assessment in assessment_values){
# Increment index
index <- index + 1
if(index == 1){
# Analyze for the first assessment
# Time between experiment start and assessment timestamp
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(experiment_start, DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
vmaf <- c()
vmaf_index = 0
for(vmaf in playing_vmaf){
vmaf_index = vmaf_index + 1
vmaf_timestamp = strptime(timestamps[vmaf_index], DATE_FORMAT)
if(vmaf_timestamp >= previous_timestamp & vmaf_timestamp <= current_timestamp){
print("ok")
vmaf <- c(vmaf, playing_vmaf[vmaf_index])
print(length(vmaf))
}
}
}
else{
# Analyze for the rest
# Time between current assessment timestamp and the previous one
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(assessment_timestamps[index-1], DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
}
}
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
assessment_values = na.omit(data$assessment_value)
assessment_timestamps = data$assessment_timestamp # Removing NAs
assessment_timestamps <- assessment_timestamps[assessment_timestamps != ""] # Removing empty strings
experiment_start <- data$timestamp[1]
index <- 0
for(assessment in assessment_values){
# Increment index
index <- index + 1
if(index == 1){
# Analyze for the first assessment
# Time between experiment start and assessment timestamp
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(experiment_start, DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
vmaf <- c()
vmaf_index = 0
for(vmaf in playing_vmaf){
vmaf_index = vmaf_index + 1
vmaf_timestamp = strptime(timestamps[vmaf_index], DATE_FORMAT)
if(vmaf_timestamp >= previous_timestamp & vmaf_timestamp <= current_timestamp){
print("ok")
print(`Adding {playing_vmaf[vmaf_index]}`)
vmaf <- c(vmaf, playing_vmaf[vmaf_index])
print(length(vmaf))
}
}
}
else{
# Analyze for the rest
# Time between current assessment timestamp and the previous one
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(assessment_timestamps[index-1], DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
}
}
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
assessment_values = na.omit(data$assessment_value)
assessment_timestamps = data$assessment_timestamp # Removing NAs
assessment_timestamps <- assessment_timestamps[assessment_timestamps != ""] # Removing empty strings
experiment_start <- data$timestamp[1]
index <- 0
for(assessment in assessment_values){
# Increment index
index <- index + 1
if(index == 1){
# Analyze for the first assessment
# Time between experiment start and assessment timestamp
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(experiment_start, DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
vmaf <- c()
vmaf_index = 0
for(vmaf in playing_vmaf){
vmaf_index = vmaf_index + 1
vmaf_timestamp = strptime(timestamps[vmaf_index], DATE_FORMAT)
if(vmaf_timestamp >= previous_timestamp & vmaf_timestamp <= current_timestamp){
print("ok")
print(playing_vmaf[vmaf_index])
vmaf <- c(vmaf, playing_vmaf[vmaf_index])
print(length(vmaf))
}
}
}
else{
# Analyze for the rest
# Time between current assessment timestamp and the previous one
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(assessment_timestamps[index-1], DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
}
}
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
assessment_values = na.omit(data$assessment_value)
assessment_timestamps = data$assessment_timestamp # Removing NAs
assessment_timestamps <- assessment_timestamps[assessment_timestamps != ""] # Removing empty strings
experiment_start <- data$timestamp[1]
index <- 0
for(assessment in assessment_values){
# Increment index
index <- index + 1
if(index == 1){
# Analyze for the first assessment
# Time between experiment start and assessment timestamp
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(experiment_start, DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
vmaf <- c()
vmaf_index = 0
for(vmaf in playing_vmaf){
vmaf_index = vmaf_index + 1
vmaf_timestamp = strptime(timestamps[vmaf_index], DATE_FORMAT)
#if(vmaf_timestamp >= previous_timestamp & vmaf_timestamp <= current_timestamp){
vmaf <- c(vmaf, playing_vmaf[vmaf_index])
print(length(vmaf))
#}
}
}
else{
# Analyze for the rest
# Time between current assessment timestamp and the previous one
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(assessment_timestamps[index-1], DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
}
}
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
assessment_values = na.omit(data$assessment_value)
assessment_timestamps = data$assessment_timestamp # Removing NAs
assessment_timestamps <- assessment_timestamps[assessment_timestamps != ""] # Removing empty strings
experiment_start <- data$timestamp[1]
index <- 0
for(assessment in assessment_values){
# Increment index
index <- index + 1
if(index == 1){
# Analyze for the first assessment
# Time between experiment start and assessment timestamp
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(experiment_start, DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
vmaf <- c()
vmaf_index = 0
for(vmaf in playing_vmaf){
vmaf_index = vmaf_index + 1
vmaf_timestamp = strptime(timestamps[vmaf_index], DATE_FORMAT)
#if(vmaf_timestamp >= previous_timestamp & vmaf_timestamp <= current_timestamp){
vmaf <- append(vmaf, playing_vmaf[vmaf_index])
print(length(vmaf))
#}
}
}
else{
# Analyze for the rest
# Time between current assessment timestamp and the previous one
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(assessment_timestamps[index-1], DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
}
}
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
assessment_values = na.omit(data$assessment_value)
assessment_timestamps = data$assessment_timestamp # Removing NAs
assessment_timestamps <- assessment_timestamps[assessment_timestamps != ""] # Removing empty strings
experiment_start <- data$timestamp[1]
index <- 0
for(assessment in assessment_values){
# Increment index
index <- index + 1
if(index == 1){
# Analyze for the first assessment
# Time between experiment start and assessment timestamp
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(experiment_start, DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
vmaf <- c()
vmaf_index = 0
for(vmaf in playing_vmaf){
vmaf_index = vmaf_index + 1
vmaf_timestamp = strptime(timestamps[vmaf_index], DATE_FORMAT)
#if(vmaf_timestamp >= previous_timestamp & vmaf_timestamp <= current_timestamp){
vmaf <- append(vmaf, playing_vmaf[vmaf_index])
print(length(vmaf))
#}
}
}
else{
# Analyze for the rest
# Time between current assessment timestamp and the previous one
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(assessment_timestamps[index-1], DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
}
}
library("lubridate")
csv_files = list.files("../csv")
data <- read.csv(file.path("../csv", csv_files[1]))
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
playing_vmaf = data$playing_vmaf
timestamps = data$timestamp
assessment_values = na.omit(data$assessment_value)
assessment_timestamps = data$assessment_timestamp # Removing NAs
assessment_timestamps <- assessment_timestamps[assessment_timestamps != ""] # Removing empty strings
experiment_start <- data$timestamp[1]
index <- 0
for(assessment in assessment_values){
# Increment index
index <- index + 1
if(index == 1){
# Analyze for the first assessment
# Time between experiment start and assessment timestamp
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(experiment_start, DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
vmaf <- c()
vmaf_index = 0
for(vmaf in playing_vmaf){
vmaf_index = vmaf_index + 1
vmaf_timestamp = strptime(timestamps[vmaf_index], DATE_FORMAT)
#if(vmaf_timestamp >= previous_timestamp & vmaf_timestamp <= current_timestamp){
hwdp <- append(vmaf, playing_vmaf[vmaf_index])
print(length(hwdp))
#}
}
}
else{
# Analyze for the rest
# Time between current assessment timestamp and the previous one
current_timestamp = strptime(assessment_timestamps[index], DATE_FORMAT)
previous_timestamp = strptime(assessment_timestamps[index-1], DATE_FORMAT)
t_delta = current_timestamp - previous_timestamp
}
}
reticulate::repl_python()
y
reticulate::repl_python()
Y
reticulate::repl_python()
library("lubridate")
csv_files = list.files("../csv")
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
output_assessment <- c()
output_mean_vmaf <- c()
for(file in csv_files){
data <- read.csv(file.path("../csv", file))
playing_vmaf = data$playing_vmaf
timestamp = data$timestamp
assessment_value = na.omit(data$assessment_value)
assessment_timestamp = data$assessment_timestamp # Removing NAs
assessment_timestamp <- assessment_timestamp[assessment_timestamp != ""] # Removing empty strings
experiment_start <- data$timestamp[1]
index <- 0
for(assessment in assessment_value){
# Increment index
index <- index + 1
current_timestamp = strptime(assessment_timestamp[index], DATE_FORMAT)
if(index == 1){
previous_timestamp = strptime(experiment_start, DATE_FORMAT)
}
else{
previous_timestamp = strptime(assessment_timestamp[index-1], DATE_FORMAT)
}
t_delta = current_timestamp - previous_timestamp
vmaf <- c()
for(i in 1:length(playing_vmaf)){
vmaf_timestamp = strptime(timestamp[i], DATE_FORMAT)
if(vmaf_timestamp > previous_timestamp & vmaf_timestamp < current_timestamp){
vmaf <- c(vmaf, playing_vmaf[i])
}
}
output_assessment <- c(output_assessment, assessment)
output_mean_vmaf <- c(output_mean_vmaf, mean(vmaf))
}
}
library("lubridate")
csv_files = list.files("../csv")
DATE_FORMAT = "%Y-%m-%dT%H:%M:%OS"
output_assessment <- c()
output_mean_vmaf <- c()
for(file in csv_files){
data <- read.csv(file.path("../csv", file))
playing_vmaf = data$playing_vmaf
timestamp = data$timestamp
assessment_value = na.omit(data$assessment_value)
assessment_timestamp = data$assessment_timestamp # Removing NAs
assessment_timestamp <- assessment_timestamp[assessment_timestamp != ""] # Removing empty strings
experiment_start <- data$timestamp[1]
index <- 0
for(assessment in assessment_value){
# Increment index
index <- index + 1
current_timestamp = strptime(assessment_timestamp[index], DATE_FORMAT)
if(index == 1){
previous_timestamp = strptime(experiment_start, DATE_FORMAT)
}
else{
previous_timestamp = strptime(assessment_timestamp[index-1], DATE_FORMAT)
}
t_delta = current_timestamp - previous_timestamp
vmaf <- c()
for(i in 1:length(playing_vmaf)){
vmaf_timestamp = strptime(timestamp[i], DATE_FORMAT)
if(vmaf_timestamp > previous_timestamp & vmaf_timestamp < current_timestamp){
vmaf <- c(vmaf, playing_vmaf[i])
}
}
output_assessment <- c(output_assessment, assessment)
output_mean_vmaf <- c(output_mean_vmaf, mean(vmaf))
}
}
plot(output_mean_vmaf, output_assessment)
